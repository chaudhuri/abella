Define append : list A -> list A -> list A -> prop by
; append nil K K
; append (X :: J) K (X :: L) := append J K L.

Suspend append J _ K.

Define adj : list A -> A -> list A -> prop by
; adj L X (X :: L)
; adj (Y :: J) X (Y :: L) := adj J X L.

Suspend adj J _ L.

Theorem adj_swap[A] : forall (E F : A) (J K L : list A),
  adj J E K -> adj K F L ->
  exists U, adj J F U /\ adj U E L.
induction on 2. intros. case H2.
  search.
  case H1.
    search.
    apply IH to H4 H3. search.

Define perm2 : list A -> list A -> prop by
; perm2 nil nil
; perm2 (X :: J) K :=
    exists K1, adj K1 X K /\ perm2 J K1.

Suspend perm2 J _.

Theorem perm2_nil2[A] : forall (L : list A), perm2 L nil -> L = nil.
intros. case H1. search. case H2.

Theorem perm2_cons2[A] : forall (J L : list A) (E : A), perm2 J (E :: L) ->
  exists K, adj K E J /\ perm2 K L.
induction on 1. intros. case H1.
  compute H2. search.
  apply IH to *H3. search.

% Theorem perm2_sym[A] : forall (J L : list A), perm2 J L -> perm2 L J.
% induction on 1. intros. case H1.
%   search.
%   apply IH to *H3.

Seal Type mset2 with perm2.

Theorem mset2_perm_stable[A] : forall (J K : list A), perm2 J K -> mset2 J = mset2 K.
intros. search.

Type use mset2 A -> prop.

Set witnesses on.

Theorem mset2_use[A] : forall (J K : list A), perm2 K J -> use (mset2 J) -> use (mset2 K).
intros. search.

%%%%% Define p2 : mset2 A -> prop by
%%%%%   p2 (mset2 (A :: L)) := member A L.
%%%%%
%%%%% Suspend p2 (mset2 L).
%%%%%
%%%%% Theorem test2 : p2 (mset2 (b :: a :: nil)) -> false.
%%%%% intros. compute H1 with perm2_nil2, perm2_cons2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% New MLL

Kind atm, form type.
Type atm,natm  atm -> form.
Type tens, par form -> form -> form.
Type one, bot  form.

Type pp, qq atm.

Define mll2 : mset2 form -> prop by
; mll2 (mset2 (atm A :: natm A :: nil))
% ; mll2 (mset2 (one :: nil))
% ; mll2 (mset2 (bot :: L)) := mll2 (mset2 L)
; mll2 (mset2 (tens A B :: L)) :=
    exists J K, append J K L /\
    mll2 (mset2 (A :: J)) /\ mll2 (mset2 (B :: K))
; mll2 (mset2 (par A B :: L)) :=
    mll2 (mset2 (A :: B :: L)).

Suspend mll2 (mset2 L).

Theorem mll2_fail_1 : forall A B, mll2 (mset2 (tens (atm A) (atm B) :: nil)) -> false.
intros. compute H1 with perm2_nil2, perm2_cons2.

Query 4 mll2 (mset2 (A :: B :: nil)).

Theorem mll2_fail_2 : mll2 (mset2 (tens (atm pp) (natm qq) ::
                                   tens (natm pp) (atm qq) :: nil)) -> false.
intros. compute H1 with perm2_nil2, perm2_cons2.

Set subgoals off.

Theorem mll2_fail_3 : mll2 (mset2 (tens (atm pp) (atm qq) ::
                                   tens (atm pp) (natm qq) ::
                                   tens (natm pp) (atm qq) ::
                                   tens (natm pp) (natm qq) :: nil)) -> false.
intros.
  case H1.
    compute *H2 with perm2_nil2, perm2_cons2.
    compute *H2 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
      compute *H3.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H4 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
        compute *H5 with perm2_nil2, perm2_cons2.
    compute H2 with perm2_nil2, perm2_cons2.

Set subgoals on.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Some meta-theorems

Theorem perm2_trans[A] : forall (J K L : list A), perm2 J K -> perm2 K L -> perm2 J L. skip.

Theorem mll2_perm : forall J K, perm2 K J -> mll2 (mset2 J) -> mll2 (mset2 K).
intros. search.

Theorem mll2_perm_alt : forall J K, perm2 J K -> mll2 (mset2 J) -> mll2 (mset2 K).
intros. assert mll2 (mset2 J) = mll2 (mset2 K).
  % can't make progress from this:
  %     Variables: J K
  %     H1 : perm2 J K
  %     H2 : mll2 (mset2 J)
  %     H3 : mll2 (mset2 J) = mll2 (mset2 K)
  %     ============================
  %      mll2 (mset2 K)
  % because (case H3) would just reduce it to (perm2 J K).
  abort.

Define dual : form -> form -> prop by
; dual (atm A) (natm A)
; dual (tens A B) (par Ad Bd) := dual A Ad /\ dual B Bd
% ; dual one bot
.

Theorem dual_det : forall A B C, dual A B -> dual A C -> B = C.
induction on 1. intros. case H1.
  case H2. search.
  case H2. apply IH to *H3 *H5. apply IH to *H4 *H6. search.

Set witnesses on.

Theorem mll2_gid : forall A B, dual A B -> mll2 (mset2 (A :: B :: nil)).
induction on 1. intros. case H1.
  search.
  apply IH to *H2. apply IH to *H3. search 6.

Set witnesses off.

%% Theorem mll2_cut : forall A B J K L, dual A B ->
%%   mll2 (mset2 (A :: J)) -> mll2 (mset2 (B :: K)) ->
%%   append J K L -> mll2 (mset2 L).
%% induction on 1. induction on 2. intros. case H1.
%%   case H2.
%%     compute *H5 *H4 with perm2_nil2, perm2_cons2. search.
%%     compute *H5. compute H10 with perm2_cons2.
